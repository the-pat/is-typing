{"version":3,"sources":["components/NamePicker.js","components/BackButton.js","components/IsTyping.js","components/App.js","components/Router.js","serviceWorker.js","index.js"],"names":["NamePicker","name","React","createRef","goToName","event","preventDefault","current","value","props","history","push","encodeURIComponent","Helmet","className","onSubmit","this","type","ref","required","placeholder","Component","withRouter","onClick","goBack","IsTyping","App","state","params","match","setState","decodeURIComponent","Router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAkCeA,E,2MA7BbC,KAAOC,IAAMC,Y,EAMbC,SAAW,SAAAC,GACTA,EAAMC,iBAEN,IAAML,EAAO,EAAKA,KAAKM,QAAQC,MAE/B,EAAKC,MAAMC,QAAQC,KAAnB,WAA4BC,mBAAmBX,M,wEAI/C,OACE,oCACE,kBAACY,EAAA,OAAD,KACE,gDAEF,0BAAMC,UAAU,gBAAgBC,SAAUC,KAAKZ,UAC7C,2BAAOa,KAAK,OAAOC,IAAKF,KAAKf,KAAMkB,UAAQ,EAACC,YAAY,SACxD,4BAAQH,KAAK,UAAb,sB,GAvBef,IAAMmB,WCGhBC,eAJI,SAAC,GAAD,IAAGZ,EAAH,EAAGA,QAAH,OACjB,4BAAQa,QAASb,EAAQc,QAAzB,WCgBaC,EAdE,SAAAhB,GAAK,OACpB,oCACE,kBAACI,EAAA,OAAD,KACE,+BAAQJ,EAAMR,KAAd,kBAEF,6BAAMQ,EAAMR,KAAZ,iBACA,kBAAC,EAAD,QCaWyB,E,2MAnBbC,MAAQ,CACN1B,KAAM,I,mFAOa,IACX2B,EAAWZ,KAAKP,MAAMoB,MAAtBD,OAERZ,KAAKc,SAAS,CAAE7B,KAAM8B,mBAAmBH,EAAO3B,U,+BAIhD,OAAO,kBAAC,EAAD,CAAUA,KAAMe,KAAKW,MAAM1B,W,GAhBpBC,IAAMmB,WCSTW,EATA,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IACjC,kBAAC,IAAD,CAAOkC,KAAK,SAASC,UAAWT,OCGlBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MACvB,2DCbNW,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SD8H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.512cf66c.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet } from \"react-helmet\";\n\nclass NamePicker extends React.Component {\n  name = React.createRef();\n\n  static propTypes = {\n    history: PropTypes.object\n  };\n\n  goToName = event => {\n    event.preventDefault();\n\n    const name = this.name.current.value;\n\n    this.props.history.push(`/${encodeURIComponent(name)}`);\n  };\n\n  render() {\n    return (\n      <>\n        <Helmet>\n          <title>Is Typing...</title>\n        </Helmet>\n        <form className=\"name-selector\" onSubmit={this.goToName}>\n          <input type=\"text\" ref={this.name} required placeholder=\"Name\" />\n          <button type=\"submit\">Is Typing...</button>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default NamePicker;\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst BackButton = ({ history }) => (\n  <button onClick={history.goBack}>Back</button>\n);\n\nexport default withRouter(BackButton);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet } from \"react-helmet\";\n\nimport BackButton from \"./BackButton\";\n\nconst IsTyping = props => (\n  <>\n    <Helmet>\n      <title>{props.name} is typing...</title>\n    </Helmet>\n    <div>{props.name} is typing...</div>\n    <BackButton />\n  </>\n);\n\nIsTyping.propTypes = {\n  name: PropTypes.string.isRequired\n};\n\nexport default IsTyping;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport IsTyping from \"./IsTyping\";\n\nclass App extends React.Component {\n  state = {\n    name: \"\"\n  };\n\n  static propTypes = {\n    match: PropTypes.object\n  };\n\n  componentDidMount() {\n    const { params } = this.props.match;\n\n    this.setState({ name: decodeURIComponent(params.name) });\n  }\n\n  render() {\n    return <IsTyping name={this.state.name} />;\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport NamePicker from \"./NamePicker\";\nimport App from \"./App\";\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={NamePicker} />\n      <Route path=\"/:name\" component={App} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Router from \"./components/Router\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}